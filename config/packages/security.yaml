security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # users_in_memory: { memory: null }
        dashboard_users_provider:
            entity:
                class: App\Dashboard\User\Domain\Agregate\User
                property: email.value

        # dashboard_users_provider:
        #     chain:
        #         providers: ['dashboard_legacy_users_provider']
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        # main:
        #     lazy: true
        #     provider: users_in_memory
        dashboard:
            pattern: ^/*
            lazy: true
            stateless: true
            provider: dashboard_users_provider
            custom_authenticators:
                - App\Dashboard\Security\Application\ApplicationUserAuthenticator\ApplicationUserAuthenticator
                - App\Dashboard\Security\Application\GoogleUserAuthenticator\GoogleUserAuthenticator
            # logout:
            #     path: /logout
            # json_login:
            #     check_path: /google-authentication

            # access_token:
            #     # token_handler: App\Security\AccessTokenHandler
            #     token_extractors: header

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
